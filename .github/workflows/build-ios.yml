# Nome do arquivo: .github/workflows/build_ios.yml

name: Build Flutter iOS, Release, and Update AltStore Source (Incremental Versioning)

on:
  push:
    branches:
      - main # Ou a branch que você usa para produção
  workflow_dispatch:

jobs:
  build_and_release_ios:
    name: Build, Release, and Update Source
    runs-on: macos-latest
    permissions:
      contents: write # Necessário para criar releases e fazer push do JSON
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Para fazer push do JSON atualizado

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Validate pubspec.yaml and Get Flutter dependencies
        run: |
          echo "Verificando pubspec.yaml..."
          if [ ! -f pubspec.yaml ]; then
            echo "❌ ERRO FATAL: pubspec.yaml não encontrado na raiz do projeto."
            exit 1
          fi
          if ! grep -A 1 "environment:" pubspec.yaml | grep -q "sdk:"; then
            echo "❌ ERRO FATAL: A seção 'environment:' com 'sdk:' não foi encontrada ou está mal formatada no pubspec.yaml."
            echo "Conteúdo esperado no pubspec.yaml:"
            echo "environment:"
            echo "  sdk: '^3.8.0' # ou versão compatível"
            echo "Por favor, corrija o arquivo pubspec.yaml na raiz do seu projeto."
            exit 1
          fi
          echo "pubspec.yaml parece ter a estrutura básica correta."
          echo "Tentando obter dependências..."
          flutter pub get

      - name: Clean Flutter build
        run: flutter clean

      - name: Prepare Versioning Info
        id: prep_version_info
        run: |
          PUB_VERSION_BASE=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f 1)
          if [ -z "$PUB_VERSION_BASE" ]; then
            echo "❌ ERRO: Não foi possível extrair PUB_VERSION_BASE do pubspec.yaml."
            exit 1
          fi
          
          BUILD_NUMBER="${{ github.run_number }}"
          EFFECTIVE_VERSION="${PUB_VERSION_BASE}.${BUILD_NUMBER}" # Ex: 1.0.0.15
          
          echo "PUB_VERSION_BASE=${PUB_VERSION_BASE}" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV
          echo "EFFECTIVE_VERSION=${EFFECTIVE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_TAG=v${EFFECTIVE_VERSION}" >> $GITHUB_ENV
          
          CURRENT_DATE_ISO=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "CURRENT_DATE_ISO=${CURRENT_DATE_ISO}" >> $GITHUB_ENV
          
          # Certifique-se que este é o Bundle ID real do seu IPA compilado (ex: com.example.helloIos)
          APP_BUNDLE_ID="com.example.helloIos" 
          echo "APP_BUNDLE_ID=${APP_BUNDLE_ID}" >> $GITHUB_ENV

          echo "Versão Base (pubspec): ${PUB_VERSION_BASE}"
          echo "Número do Build (run_number): ${BUILD_NUMBER}"
          echo "Versão Efetiva para IPA/JSON: ${EFFECTIVE_VERSION}"
          echo "Tag de Release: v${EFFECTIVE_VERSION}"

      - name: Build iOS .app (with version)
        run: |
          echo "Construindo IPA com Nome de Build: ${{ env.EFFECTIVE_VERSION }} e Número de Build: ${{ env.BUILD_NUMBER }}"
          flutter build ios --release --no-codesign \
            --build-name="${{ env.EFFECTIVE_VERSION }}" \
            --build-number="${{ env.BUILD_NUMBER }}"

      - name: Create unsigned IPA
        run: |
          cd build/ios/iphoneos/
          mkdir Payload
          mv Runner.app Payload/
          zip -r ../../../app-unsigned.ipa Payload/
          cd ../../../

      - name: Get IPA Size
        id: get_ipa_size
        run: |
          IPA_PATH="./app-unsigned.ipa"
          if [ ! -f "$IPA_PATH" ]; then
            echo "❌ ERRO: Arquivo IPA ${IPA_PATH} não encontrado."
            exit 1
          fi
          IPA_SIZE=$(stat -f %z "${IPA_PATH}")
          echo "IPA_SIZE=${IPA_SIZE}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: App Build ${{ env.EFFECTIVE_VERSION }}
          body: |
            Automated release of unsigned IPA for AltStore.
            Version: ${{ env.EFFECTIVE_VERSION }}
            Build Number (Run Number): ${{ env.BUILD_NUMBER }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (IPA)
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-unsigned.ipa
          asset_name: app-unsigned.ipa
          asset_content_type: application/vnd.iphone

      - name: Setup jq
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            brew install jq
          else
            echo "jq is already installed."
          fi
          
      - name: Update AltStore Source JSON
        env:
          IPA_DOWNLOAD_URL: ${{ steps.upload_release_asset.outputs.browser_download_url }}
        run: |
          _JSON_SOURCE_FILE="altstore_source.json" 

          if [ ! -f "${_JSON_SOURCE_FILE}" ]; then
            echo "❌ ERRO: ${_JSON_SOURCE_FILE} não encontrado! Crie o arquivo na raiz do repositório."
            exit 1
          fi
          
          NEW_VERSION_JSON_STRING=$(jq -n \
            --arg version "${{ env.EFFECTIVE_VERSION }}" \
            --arg date "${{ env.CURRENT_DATE_ISO }}" \
            --arg localizedDescription "Build: ${{ env.BUILD_NUMBER }}. Base: ${{ env.PUB_VERSION_BASE }}. Release automatizado." \
            --arg downloadURL "${{ env.IPA_DOWNLOAD_URL }}" \
            --argjson size "${{ env.IPA_SIZE }}" \
            --arg minOSVersion "14.0" \
            '{version: $version, date: $date, localizedDescription: $localizedDescription, downloadURL: $downloadURL, size: $size, minOSVersion: $minOSVersion}')

          jq \
            --argjson newVersionEntry "$NEW_VERSION_JSON_STRING" \
            --arg bundleId "${{ env.APP_BUNDLE_ID }}" \
            '(.apps[] | select(.bundleIdentifier == $bundleId).versions) |= [$newVersionEntry] + .' \
            "${_JSON_SOURCE_FILE}" > tmp_altstore_source.json && mv tmp_altstore_source.json "${_JSON_SOURCE_FILE}"
          
          echo "${_JSON_SOURCE_FILE} updated with version ${{ env.EFFECTIVE_VERSION }}."

      - name: Commit and Push Updated AltStore Source
        run: |
          _THE_SOURCE_FILE="altstore_source.json"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! git diff --quiet "${_THE_SOURCE_FILE}"; then
            git add "${_THE_SOURCE_FILE}"
            git commit -m "Automated: Update AltStore source to version ${{ env.EFFECTIVE_VERSION }}"
            git push
            echo "✅ Alterações em ${_THE_SOURCE_FILE} enviadas."
          else
            echo "ℹ️ Nenhuma alteração em ${_THE_SOURCE_FILE} para commitar."
          fi